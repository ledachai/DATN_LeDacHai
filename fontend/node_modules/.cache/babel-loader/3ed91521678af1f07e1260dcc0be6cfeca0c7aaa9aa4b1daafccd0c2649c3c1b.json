{"ast":null,"code":"var _jsxFileName = \"H:\\\\MonHoc\\\\DATN\\\\DATN_V1\\\\DATN_LeDacHai\\\\fontend\\\\src\\\\Components\\\\Slideshow\\\\Slideshow.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Slideshow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    /*\n    * State slideIndex dùng để xác định xem slide nào đang được active.\n    * Các ảnh sẽ được xếp chồng lên nhau, cái nào active thì hiển thị,\n    * Cái nào không active thì ẩn đi.\n    */\n    this.state = {\n      slideIndex: 0\n    };\n\n    /*\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước.\n    */\n    const ratioWHArray = this.props.ratio.split(\":\");\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\n    this.backward = this.backward.bind(this);\n    this.forward = this.forward.bind(this);\n    this.setSlideIndex = this.setSlideIndex.bind(this);\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.runAutomatic = this.runAutomatic.bind(this);\n  }\n\n  /*\n  * Tính chỉ số SlideIndex mới, với step là bước nhảy: +1 hoặc -1\n  * Giả sử, mình có 6 ảnh => các chỉ số lần lượt là: 0, 1, 2,...5\n  * Chú ý:\n  * Nếu đang ở chỉ số 5 mà đi về phía trước thì slideIndex = 0\n  * Nếu đang ở chỉ số 0 mà về sau thì slideIndex = 5\n  */\n  getNewSlideIndex(step) {\n    const slideIndex = this.state.slideIndex;\n    const numberSlide = this.props.input.length;\n    let newSlideIndex = slideIndex + step;\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\n    return newSlideIndex;\n  }\n\n  // Quay về ảnh phía trước, tức index giảm 1 => step = -1\n  backward() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(-1)\n    });\n  }\n\n  // Tiến tới ảnh phía sau, tức index tăng 1 => step = 1\n  forward() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(1)\n    });\n  }\n\n  // Xác định slideIndex nào sẽ được active\n  setSlideIndex(index) {\n    this.setState({\n      slideIndex: index\n    });\n  }\n\n  /*\n  * Cập nhật chiều cao cho container khi thay đổi kích thước màn hình\n  * Trong phần CSS, mình để container có width = 100%,\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100%\n  * Nhưng chiều cao phải tính lại dựa vào width và tỉ lệ this.ratioWH\n  */\n  updateDimensions() {\n    this.containerElm.style.height = `${this.containerElm.offsetWidth / this.ratioWH}px`;\n  }\n\n  /*\n  * Nếu người dùng truyền vào thuộc tính mode = automatic\n  * thì Slideshow sẽ chạy tự động dựa vào interval.\n  * Hàm này sẽ được gọi trong mỗi lượt lặp lại\n  * để cập nhật slideIndex mới cho Slideshow\n  */\n  runAutomatic() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(1)\n    });\n  }\n\n  /*\n  * Hàm này thuộc về React Component Lifecycle\n  * được gọi sau khi component này được render xong\n  * Trong đây, sẽ lưu lại reference cho container - this.containerElm\n  * Cập nhật lại chiều cao cho container - this.updateDimensions();\n  * Đăng ký sự kiện thay đổi kích thước - resize\n  * Kiểm tra nếu mode === \"automatic\" thì sẽ tạo mới một interval\n  * để thay đổi hình ảnh - this.runAutomatic()\n  * với giá trị timeout được truyền từ props hoặc mặc định là 5000 ms\n  */\n  componentDidMount() {\n    this.rootElm = ReactDOM.findDOMNode(this);\n    this.containerElm = this.rootElm.querySelector(\".container\");\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions);\n    if (this.props.mode === \"automatic\") {\n      const timeout = this.props.timeout || 5000;\n      this.automaticInterval = setInterval(() => this.runAutomatic(), Number.parseInt(timeout));\n    }\n  }\n\n  /*\n  * Hàm này cũng thuộc về React Component Lifecycle -\n  * được gọi khi component này bị xóa khỏi màn hình\n  * Lúc này, mình phải hủy bỏ sự kiện khi resize\n  * và xóa bỏ interval đã khai bảo bên trên để tránh leak memory.\n  */\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\n  }\n\n  /*\n  * Giao diện của component\n  * với phần tử ngoài cùng mình để className=\"lp-slideshow\"\n  * để tránh xung đột về tên với các component khác\n  */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lp-slideshow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [this.props.input.map((image, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `slide ${this.state.slideIndex === index ? \"active\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"number-text\",\n              children: `${index + 1} / ${this.props.input.length}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"image\",\n              src: image.src,\n              alt: image.caption\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"caption-text\",\n              children: image.caption\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"prev\",\n          onClick: this.backward,\n          children: \"\\u276E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"next\",\n          onClick: this.forward,\n          children: \"\\u276F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dot-container\",\n        children: this.props.input.map((_, index) => {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `dot ${this.state.slideIndex === index ? \"active\" : \"\"}`,\n            onClick: () => this.setSlideIndex(index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","ReactDOM","Slideshow","Component","constructor","props","state","slideIndex","ratioWHArray","ratio","split","ratioWH","backward","bind","forward","setSlideIndex","getNewSlideIndex","updateDimensions","runAutomatic","step","numberSlide","input","length","newSlideIndex","setState","index","containerElm","style","height","offsetWidth","componentDidMount","rootElm","findDOMNode","querySelector","window","addEventListener","mode","timeout","automaticInterval","setInterval","Number","parseInt","componentWillUnmount","removeEventListener","clearInterval","render","map","image","src","caption","_"],"sources":["H:/MonHoc/DATN/DATN_V1/DATN_LeDacHai/fontend/src/Components/Slideshow/Slideshow.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default class Slideshow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    /*\n    * State slideIndex dùng để xác định xem slide nào đang được active.\n    * Các ảnh sẽ được xếp chồng lên nhau, cái nào active thì hiển thị,\n    * Cái nào không active thì ẩn đi.\n    */\n    this.state = {\n      slideIndex: 0\n    };\n\n    /*\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước.\n    */\n    const ratioWHArray = this.props.ratio.split(\":\");\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\n\n    this.backward = this.backward.bind(this);\n    this.forward = this.forward.bind(this);\n    this.setSlideIndex = this.setSlideIndex.bind(this);\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.runAutomatic = this.runAutomatic.bind(this);\n  }\n\n  /*\n  * Tính chỉ số SlideIndex mới, với step là bước nhảy: +1 hoặc -1\n  * Giả sử, mình có 6 ảnh => các chỉ số lần lượt là: 0, 1, 2,...5\n  * Chú ý:\n  * Nếu đang ở chỉ số 5 mà đi về phía trước thì slideIndex = 0\n  * Nếu đang ở chỉ số 0 mà về sau thì slideIndex = 5\n  */\n  getNewSlideIndex(step) {\n    const slideIndex = this.state.slideIndex;\n    const numberSlide = this.props.input.length;\n\n    let newSlideIndex = slideIndex + step;\n\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;\n    else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\n\n    return newSlideIndex;\n  }\n\n  // Quay về ảnh phía trước, tức index giảm 1 => step = -1\n  backward() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(-1)\n    });\n  }\n\n  // Tiến tới ảnh phía sau, tức index tăng 1 => step = 1\n  forward() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(1)\n    });\n  }\n\n  // Xác định slideIndex nào sẽ được active\n  setSlideIndex(index) {\n    this.setState({\n      slideIndex: index\n    })\n  }\n\n  /*\n  * Cập nhật chiều cao cho container khi thay đổi kích thước màn hình\n  * Trong phần CSS, mình để container có width = 100%,\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100%\n  * Nhưng chiều cao phải tính lại dựa vào width và tỉ lệ this.ratioWH\n  */\n  updateDimensions() {\n    this.containerElm.style.height \n      = `${this.containerElm.offsetWidth / this.ratioWH}px`;\n  }\n\n  /*\n  * Nếu người dùng truyền vào thuộc tính mode = automatic\n  * thì Slideshow sẽ chạy tự động dựa vào interval.\n  * Hàm này sẽ được gọi trong mỗi lượt lặp lại\n  * để cập nhật slideIndex mới cho Slideshow\n  */\n  runAutomatic() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(1)\n    });\n  }\n\n  /*\n  * Hàm này thuộc về React Component Lifecycle\n  * được gọi sau khi component này được render xong\n  * Trong đây, sẽ lưu lại reference cho container - this.containerElm\n  * Cập nhật lại chiều cao cho container - this.updateDimensions();\n  * Đăng ký sự kiện thay đổi kích thước - resize\n  * Kiểm tra nếu mode === \"automatic\" thì sẽ tạo mới một interval\n  * để thay đổi hình ảnh - this.runAutomatic()\n  * với giá trị timeout được truyền từ props hoặc mặc định là 5000 ms\n  */\n  componentDidMount() {\n    this.rootElm = ReactDOM.findDOMNode(this);\n    this.containerElm = this.rootElm.querySelector(\".container\");\n\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions);\n\n    if (this.props.mode === \"automatic\") {\n      const timeout = this.props.timeout || 5000;\n\n      this.automaticInterval = setInterval(\n        () => this.runAutomatic(),\n        Number.parseInt(timeout)\n      );\n    }\n  }\n\n  /*\n  * Hàm này cũng thuộc về React Component Lifecycle -\n  * được gọi khi component này bị xóa khỏi màn hình\n  * Lúc này, mình phải hủy bỏ sự kiện khi resize\n  * và xóa bỏ interval đã khai bảo bên trên để tránh leak memory.\n  */\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\n  }\n\n  /*\n  * Giao diện của component\n  * với phần tử ngoài cùng mình để className=\"lp-slideshow\"\n  * để tránh xung đột về tên với các component khác\n  */\n  render() {\n    return (\n      <div className=\"lp-slideshow\">\n        <div className=\"container\">\n          {\n            this.props.input.map((image, index) => {\n              return (\n                <div\n                  key={index}\n                  className={\n                    `slide ${this.state.slideIndex === index ? \"active\" : \"\"}`\n                  }\n                >\n                  <div className=\"number-text\">\n                    {`${index + 1} / ${this.props.input.length}`}\n                  </div>\n                  <img className=\"image\" src={image.src} alt={image.caption} />\n                  <div className=\"caption-text\">{image.caption}</div>\n                </div>\n              )\n            })\n          }\n\n          <span className=\"prev\" onClick={this.backward}>❮</span>\n          <span className=\"next\" onClick={this.forward}>❯</span>\n        </div>\n\n        <div className=\"dot-container\">\n          {\n            this.props.input.map((_, index) => {\n              return (\n                <span\n                  key={index}\n                  className={\n                    `dot ${this.state.slideIndex === index ? \"active\" : \"\"}`\n                  }\n                  onClick={() => this.setSlideIndex(index)}\n                >\n                </span>\n              )\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}